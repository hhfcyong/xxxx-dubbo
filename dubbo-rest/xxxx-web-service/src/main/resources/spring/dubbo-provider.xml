<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
        http://www.springframework.org/schema/beans/spring-beans.xsd  
        http://code.alibabatech.com/schema/dubbo  
        http://code.alibabatech.com/schema/dubbo/dubbo.xsd">
   
	<!-- **********讲解线程模型 **************-->
	<!--如果事件处理的逻辑能迅速完成，并且不会发起新的 IO 请求，比如只是在内存中记个标识，则直接在 IO 线程上处理更快，因为减少了线程池调度。
        但如果事件处理逻辑较慢，或者需要发起新的 IO 请求，比如需要查询数据库，则必须派发到线程池，否则 IO 线程阻塞，将导致不能接收其它请求。  -->
    <!-- Dispatcher
           all 所有消息都派发到线程池，包括请求，响应，连接事件，断开事件，心跳等。
           direct 所有消息都不派发到线程池，全部在 IO 线程上直接执行。
           message 只有请求响应消息派发到线程池，其它连接断开事件，心跳等消息，直接在 IO 线程上执行。
           execution 只请求消息派发到线程池，不含响应，响应和其它连接断开事件，心跳等消息，直接在 IO 线程上执行。
           connection 在 IO 线程上，将连接断开事件放入队列，有序逐个执行，其它消息派发到线程池。
        ThreadPool
          fixed 固定大小线程池，启动时建立线程，不关闭，一直持有。(缺省)
          cached 缓存线程池，空闲一分钟自动删除，需要时重建。
          limited 可伸缩线程池，但池中的线程数只会增长不会收缩。只增长不收缩的目的是为了避免收缩时突然来了大流量引起的性能问题。 -->
	<dubbo:protocol name="rest" contextpath="xxxx-web-service" port="8080" server="servlet" dispatcher="all" threadpool="fixed" threads="100" />
	
    <dubbo:service interface="com.xxxx.restservice.IEnterpriseRestService"  ref="enterpriseRestService"  protocol="rest" validation="true"/>
        <dubbo:service interface="com.xxxx.restservice.IProductRestService"  ref="productRestService"  protocol="rest" validation="true"/>
        <dubbo:service interface="com.xxxx.restservice.IEnterpriseMongoRestService"  ref="enterpriseMongoRestService"  protocol="rest" validation="true"/>
            <dubbo:service interface="com.xxxx.restservice.IProductMongoRestService"  ref="productMongoRestService"  protocol="rest" validation="true"/>
    
</beans>