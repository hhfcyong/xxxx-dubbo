<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
        http://www.springframework.org/schema/beans/spring-beans.xsd  
        http://code.alibabatech.com/schema/dubbo  
        http://code.alibabatech.com/schema/dubbo/dubbo.xsd">

	<dubbo:application name="xxxx-web" />
	

	
	<dubbo:registry protocol="zookeeper" address="10.211.55.7:2181" />
    <!--***********讲解启动时检查**********-->
    <!--Dubbo缺省会在启动时检查依赖的服务是否可用，不可用时会抛出异常，阻止Spring初始化完成，以便上线时，能及早发现问题，默认check="true"  -->
    <!-- 不启动service服务，直接启动web，演示报错问题 -->
    <!--  dubbo.properties可以直接配置：dubbo.reference.check=false 强制改变所有 reference 的 check 值，就算配置中有声明，也会被覆盖。 -->
    
    <!-- ********讲解集群容错*************** -->
    <!-- 在集群调用失败时，Dubbo 提供了多种容错方案，缺省为 failover 重试。 -->
    <!--Failover Cluster: 失败自动切换，当出现失败，重试其它服务器 1。通常用于读操作，但重试会带来更长延迟。可通过 retries="2" 来设置重试次数(不含第一次)。 -->
    <!-- Failfast Cluster:快速失败，只发起一次调用，失败立即报错。通常用于非幂等性的写操作，比如新增记录。 -->
    <!-- Failsafe Cluster:失败安全，出现异常时，直接忽略。通常用于写入审计日志等操作。 -->
    <!-- Failback Cluster:失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作。 -->
    <!-- Forking Cluster:并行调用多个服务器，只要一个成功即返回。通常用于实时性要求较高的读操作，但需要浪费更多服务资源。可通过 forks="2" 来设置最大并行数。 -->
    <!-- Broadcast Cluster:广播调用所有提供者，逐个调用，任意一台报错则报错 2。通常用于通知所有提供者更新缓存或日志等本地资源信息。 -->
    
    <!-- **********讲解负载均衡************** -->
    <!--在集群负载均衡时，Dubbo 提供了多种均衡策略，缺省为 random 随机调用。  -->
    <!-- Random LoadBalance:随机，按权重设置随机概率。在一个截面上碰撞的概率高，但调用量越大分布越均匀，而且按概率使用权重后也比较均匀，有利于动态调整提供者权重。-->
    <!--RoundRobin LoadBalance：轮循，按公约后的权重设置轮循比率。存在慢的提供者累积请求的问题，比如：第二台机器很慢，但没挂，当请求调到第二台时就卡在那，久而久之，所有请求都卡在调到第二台上。  -->
    <!-- LeastActive LoadBalance:最少活跃调用数，相同活跃数的随机，活跃数指调用前后计数差,慢的提供者收到更少请求，因为越慢的提供者的调用前后计数差会越大 -->
    <!-- ConsistentHash LoadBalance:一致性 Hash，相同参数的请求总是发到同一提供者,当某一台提供者挂时，原本发往该提供者的请求，基于虚拟节点，平摊到其它提供者，不会引起剧烈变动。 -->
	

	<dubbo:reference interface="com.xxxx.repo.IEnterpriseService" id="enterpriseService" timeout="10000" check="false"  cluster="failover" retries="2" loadbalance="random"/>
    <dubbo:reference interface="com.xxxx.repo.IProductService" id="productService" timeout="10000" check="false"  cluster="failover" retries="2" loadbalance="random"/>
    <dubbo:reference interface="com.xxxx.repo.IEnterpriseMongoService" id="enterpriseMongoService" timeout="10000" check="false"  cluster="failover" retries="2" loadbalance="random"/>
	    <dubbo:reference interface="com.xxxx.repo.IProductMongoService" id="productMongoService" timeout="10000" check="false"  cluster="failover" retries="2" loadbalance="random"/>
	
	<!--*********** 配置直连**************** -->
	<!-- 在开发及测试环境下，经常需要绕过注册中心，只测试指定服 务提供者，这时候可能需要点对点直连，点对点直联方式，
	      将以服务接口为单位，忽略注册中心的提供者列表，A 接口配置点对点，不影响 B 接口从注册中心获取列表。 -->
	<!-- 如果是线上需求需要点对点，可在 <dubbo:reference> 中配置 url 指向提供者，将绕过注册中心，多个地址用分号隔开，配置如下: -->
<!-- 		<dubbo:reference interface="com.xxxx.repo.IEnterpriseService" id="enterpriseService" timeout="10000" check="false" url="dubbo://localhost:20884" />
 -->	
</beans>  